// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class buyed extends ethereum.Event {
  get params(): buyed__Params {
    return new buyed__Params(this);
  }
}

export class buyed__Params {
  _event: buyed;

  constructor(event: buyed) {
    this._event = event;
  }

  get tokenon(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payout(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokencre(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get reg(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get mpowner(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get gains(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class BSCTestNet__tokensDataResult {
  value0: BigInt;
  value1: string;
  value2: boolean;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: string,
    value2: boolean,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class BSCTestNet__obtenerNftsResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get data(): string {
    return this[1].toString();
  }

  get onSale(): boolean {
    return this[2].toBoolean();
  }

  get tokenID(): BigInt {
    return this[3].toBigInt();
  }

  get creator(): Address {
    return this[4].toAddress();
  }
}

export class BSCTestNet__obtenerPaginav1ResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get data(): string {
    return this[1].toString();
  }

  get onSale(): boolean {
    return this[2].toBoolean();
  }

  get tokenID(): BigInt {
    return this[3].toBigInt();
  }

  get creator(): Address {
    return this[4].toAddress();
  }
}

export class BSCTestNet__obtenerPaginav2ResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get data(): string {
    return this[1].toString();
  }

  get onSale(): boolean {
    return this[2].toBoolean();
  }

  get tokenID(): BigInt {
    return this[3].toBigInt();
  }

  get creator(): Address {
    return this[4].toAddress();
  }
}

export class BSCTestNet__tokensOfResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get data(): string {
    return this[1].toString();
  }

  get onSale(): boolean {
    return this[2].toBoolean();
  }

  get tokenID(): BigInt {
    return this[3].toBigInt();
  }

  get creator(): Address {
    return this[4].toAddress();
  }
}

export class BSCTestNet__tokensOfPaginav1ResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get data(): string {
    return this[1].toString();
  }

  get onSale(): boolean {
    return this[2].toBoolean();
  }

  get tokenID(): BigInt {
    return this[3].toBigInt();
  }

  get creator(): Address {
    return this[4].toAddress();
  }
}

export class BSCTestNet__getItemInfoResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get data(): string {
    return this[1].toString();
  }

  get onSale(): boolean {
    return this[2].toBoolean();
  }

  get tokenID(): BigInt {
    return this[3].toBigInt();
  }

  get creator(): Address {
    return this[4].toAddress();
  }
}

export class BSCTestNet__obtenerNftsbyrangoResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get data(): string {
    return this[1].toString();
  }

  get onSale(): boolean {
    return this[2].toBoolean();
  }

  get tokenID(): BigInt {
    return this[3].toBigInt();
  }

  get creator(): Address {
    return this[4].toAddress();
  }
}

export class BSCTestNet extends ethereum.SmartContract {
  static bind(address: Address): BSCTestNet {
    return new BSCTestNet("BSCTestNet", address);
  }

  _tokenIds(): BigInt {
    let result = super.call("_tokenIds", "_tokenIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__tokenIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_tokenIds", "_tokenIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minero(): Address {
    let result = super.call("minero", "minero():(address)", []);

    return result[0].toAddress();
  }

  try_minero(): ethereum.CallResult<Address> {
    let result = super.tryCall("minero", "minero():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nTokenOnSale(): BigInt {
    let result = super.call("nTokenOnSale", "nTokenOnSale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nTokenOnSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nTokenOnSale", "nTokenOnSale():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokensData(param0: BigInt): BSCTestNet__tokensDataResult {
    let result = super.call(
      "tokensData",
      "tokensData(uint256):(uint256,string,bool,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BSCTestNet__tokensDataResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_tokensData(
    param0: BigInt
  ): ethereum.CallResult<BSCTestNet__tokensDataResult> {
    let result = super.tryCall(
      "tokensData",
      "tokensData(uint256):(uint256,string,bool,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BSCTestNet__tokensDataResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minar(receptor: Address, datos: string, price: BigInt): BigInt {
    let result = super.call(
      "minar",
      "minar(address,string,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(receptor),
        ethereum.Value.fromString(datos),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );

    return result[0].toBigInt();
  }

  try_minar(
    receptor: Address,
    datos: string,
    price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minar",
      "minar(address,string,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(receptor),
        ethereum.Value.fromString(datos),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferirNft(to: Address, tokenId: BigInt): Address {
    let result = super.call(
      "transferirNft",
      "transferirNft(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toAddress();
  }

  try_transferirNft(
    to: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transferirNft",
      "transferirNft(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quemarNft(tokenId: BigInt): boolean {
    let result = super.call("quemarNft", "quemarNft(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_quemarNft(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("quemarNft", "quemarNft(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  obtenerNfts(): Array<BSCTestNet__obtenerNftsResultValue0Struct> {
    let result = super.call(
      "obtenerNfts",
      "obtenerNfts():((uint256,string,bool,uint256,address)[])",
      []
    );

    return result[0].toTupleArray<BSCTestNet__obtenerNftsResultValue0Struct>();
  }

  try_obtenerNfts(): ethereum.CallResult<
    Array<BSCTestNet__obtenerNftsResultValue0Struct>
  > {
    let result = super.tryCall(
      "obtenerNfts",
      "obtenerNfts():((uint256,string,bool,uint256,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BSCTestNet__obtenerNftsResultValue0Struct>()
    );
  }

  obtenerPaginav1(
    nTokenP: BigInt,
    nPagina: BigInt
  ): Array<BSCTestNet__obtenerPaginav1ResultValue0Struct> {
    let result = super.call(
      "obtenerPaginav1",
      "obtenerPaginav1(uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(nTokenP),
        ethereum.Value.fromUnsignedBigInt(nPagina)
      ]
    );

    return result[0].toTupleArray<
      BSCTestNet__obtenerPaginav1ResultValue0Struct
    >();
  }

  try_obtenerPaginav1(
    nTokenP: BigInt,
    nPagina: BigInt
  ): ethereum.CallResult<Array<BSCTestNet__obtenerPaginav1ResultValue0Struct>> {
    let result = super.tryCall(
      "obtenerPaginav1",
      "obtenerPaginav1(uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(nTokenP),
        ethereum.Value.fromUnsignedBigInt(nPagina)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BSCTestNet__obtenerPaginav1ResultValue0Struct>()
    );
  }

  obtenerPaginav2(
    nTokenP: BigInt,
    nPagina: BigInt
  ): Array<BSCTestNet__obtenerPaginav2ResultValue0Struct> {
    let result = super.call(
      "obtenerPaginav2",
      "obtenerPaginav2(uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(nTokenP),
        ethereum.Value.fromUnsignedBigInt(nPagina)
      ]
    );

    return result[0].toTupleArray<
      BSCTestNet__obtenerPaginav2ResultValue0Struct
    >();
  }

  try_obtenerPaginav2(
    nTokenP: BigInt,
    nPagina: BigInt
  ): ethereum.CallResult<Array<BSCTestNet__obtenerPaginav2ResultValue0Struct>> {
    let result = super.tryCall(
      "obtenerPaginav2",
      "obtenerPaginav2(uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(nTokenP),
        ethereum.Value.fromUnsignedBigInt(nPagina)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BSCTestNet__obtenerPaginav2ResultValue0Struct>()
    );
  }

  tokensOf(owner: Address): Array<BSCTestNet__tokensOfResultValue0Struct> {
    let result = super.call(
      "tokensOf",
      "tokensOf(address):((uint256,string,bool,uint256,address)[])",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toTupleArray<BSCTestNet__tokensOfResultValue0Struct>();
  }

  try_tokensOf(
    owner: Address
  ): ethereum.CallResult<Array<BSCTestNet__tokensOfResultValue0Struct>> {
    let result = super.tryCall(
      "tokensOf",
      "tokensOf(address):((uint256,string,bool,uint256,address)[])",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BSCTestNet__tokensOfResultValue0Struct>()
    );
  }

  tokensOfPaginav1(
    owner: Address,
    nTok_porpagina: BigInt,
    pag: BigInt
  ): Array<BSCTestNet__tokensOfPaginav1ResultValue0Struct> {
    let result = super.call(
      "tokensOfPaginav1",
      "tokensOfPaginav1(address,uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(nTok_porpagina),
        ethereum.Value.fromUnsignedBigInt(pag)
      ]
    );

    return result[0].toTupleArray<
      BSCTestNet__tokensOfPaginav1ResultValue0Struct
    >();
  }

  try_tokensOfPaginav1(
    owner: Address,
    nTok_porpagina: BigInt,
    pag: BigInt
  ): ethereum.CallResult<
    Array<BSCTestNet__tokensOfPaginav1ResultValue0Struct>
  > {
    let result = super.tryCall(
      "tokensOfPaginav1",
      "tokensOfPaginav1(address,uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(nTok_porpagina),
        ethereum.Value.fromUnsignedBigInt(pag)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BSCTestNet__tokensOfPaginav1ResultValue0Struct>()
    );
  }

  getItemInfo(
    _token: BigInt
  ): Array<BSCTestNet__getItemInfoResultValue0Struct> {
    let result = super.call(
      "getItemInfo",
      "getItemInfo(uint256):((uint256,string,bool,uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(_token)]
    );

    return result[0].toTupleArray<BSCTestNet__getItemInfoResultValue0Struct>();
  }

  try_getItemInfo(
    _token: BigInt
  ): ethereum.CallResult<Array<BSCTestNet__getItemInfoResultValue0Struct>> {
    let result = super.tryCall(
      "getItemInfo",
      "getItemInfo(uint256):((uint256,string,bool,uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BSCTestNet__getItemInfoResultValue0Struct>()
    );
  }

  obtenerNftsbyrango(
    _Mintoken: BigInt,
    _Maxtoken: BigInt
  ): Array<BSCTestNet__obtenerNftsbyrangoResultValue0Struct> {
    let result = super.call(
      "obtenerNftsbyrango",
      "obtenerNftsbyrango(uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_Mintoken),
        ethereum.Value.fromUnsignedBigInt(_Maxtoken)
      ]
    );

    return result[0].toTupleArray<
      BSCTestNet__obtenerNftsbyrangoResultValue0Struct
    >();
  }

  try_obtenerNftsbyrango(
    _Mintoken: BigInt,
    _Maxtoken: BigInt
  ): ethereum.CallResult<
    Array<BSCTestNet__obtenerNftsbyrangoResultValue0Struct>
  > {
    let result = super.tryCall(
      "obtenerNftsbyrango",
      "obtenerNftsbyrango(uint256,uint256):((uint256,string,bool,uint256,address)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_Mintoken),
        ethereum.Value.fromUnsignedBigInt(_Maxtoken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BSCTestNet__obtenerNftsbyrangoResultValue0Struct>()
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class MinarCall extends ethereum.Call {
  get inputs(): MinarCall__Inputs {
    return new MinarCall__Inputs(this);
  }

  get outputs(): MinarCall__Outputs {
    return new MinarCall__Outputs(this);
  }
}

export class MinarCall__Inputs {
  _call: MinarCall;

  constructor(call: MinarCall) {
    this._call = call;
  }

  get receptor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get datos(): string {
    return this._call.inputValues[1].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MinarCall__Outputs {
  _call: MinarCall;

  constructor(call: MinarCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferirNftCall extends ethereum.Call {
  get inputs(): TransferirNftCall__Inputs {
    return new TransferirNftCall__Inputs(this);
  }

  get outputs(): TransferirNftCall__Outputs {
    return new TransferirNftCall__Outputs(this);
  }
}

export class TransferirNftCall__Inputs {
  _call: TransferirNftCall;

  constructor(call: TransferirNftCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferirNftCall__Outputs {
  _call: TransferirNftCall;

  constructor(call: TransferirNftCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class QuemarNftCall extends ethereum.Call {
  get inputs(): QuemarNftCall__Inputs {
    return new QuemarNftCall__Inputs(this);
  }

  get outputs(): QuemarNftCall__Outputs {
    return new QuemarNftCall__Outputs(this);
  }
}

export class QuemarNftCall__Inputs {
  _call: QuemarNftCall;

  constructor(call: QuemarNftCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class QuemarNftCall__Outputs {
  _call: QuemarNftCall;

  constructor(call: QuemarNftCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevenderCall extends ethereum.Call {
  get inputs(): RevenderCall__Inputs {
    return new RevenderCall__Inputs(this);
  }

  get outputs(): RevenderCall__Outputs {
    return new RevenderCall__Outputs(this);
  }
}

export class RevenderCall__Inputs {
  _call: RevenderCall;

  constructor(call: RevenderCall) {
    this._call = call;
  }

  get tokenid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RevenderCall__Outputs {
  _call: RevenderCall;

  constructor(call: RevenderCall) {
    this._call = call;
  }
}

export class QuitarDelMarketPlaceCall extends ethereum.Call {
  get inputs(): QuitarDelMarketPlaceCall__Inputs {
    return new QuitarDelMarketPlaceCall__Inputs(this);
  }

  get outputs(): QuitarDelMarketPlaceCall__Outputs {
    return new QuitarDelMarketPlaceCall__Outputs(this);
  }
}

export class QuitarDelMarketPlaceCall__Inputs {
  _call: QuitarDelMarketPlaceCall;

  constructor(call: QuitarDelMarketPlaceCall) {
    this._call = call;
  }

  get tokenid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class QuitarDelMarketPlaceCall__Outputs {
  _call: QuitarDelMarketPlaceCall;

  constructor(call: QuitarDelMarketPlaceCall) {
    this._call = call;
  }
}

export class ComprarNftCall extends ethereum.Call {
  get inputs(): ComprarNftCall__Inputs {
    return new ComprarNftCall__Inputs(this);
  }

  get outputs(): ComprarNftCall__Outputs {
    return new ComprarNftCall__Outputs(this);
  }
}

export class ComprarNftCall__Inputs {
  _call: ComprarNftCall;

  constructor(call: ComprarNftCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ComprarNftCall__Outputs {
  _call: ComprarNftCall;

  constructor(call: ComprarNftCall) {
    this._call = call;
  }
}
